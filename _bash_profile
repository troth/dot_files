# -*- mode: sh -*-
# .bash_profile

#
# $Id: .bash_profile,v 1.1 2004/05/03 15:39:59 roth Exp $
#
# Ted's .bash_profile
#

# Get the aliases and functions
if [ -f ~/.bashrc ]; then
	. ~/.bashrc
fi

if [ -e ~/.xenvironment ]; then
	. ~/.xenvironment
fi

# This makes it easier to deal with schroot which shares the $HOME dir
# in chroots.
OS_REL=$(lsb_release -irs | tr '\n' ' ' | tr ' ' '-' | sed -e 's/-$//')
export OS_REL

unset PATH

PATH=/usr/local/bin:/usr/bin:/bin

# Add things that are usually only in root's path.
PATH=$PATH:/usr/local/sbin
PATH=$PATH:/usr/sbin
PATH=$PATH:/sbin

# Add all my home paths one at a time so that they are easy to comment
# out.
HOME_PATHS_PREPEND=(
    ${HOME}/local/${OS_REL}/emacs/bin
)
HOME_PATHS_APPEND=(
    ${HOME}/local/${OS_REL}/bin
    ${HOME}/local/bin
    ${HOME}/.local/bin
    ${HOME}/AppImages
    ${HOME}/.platformio/penv/bin
    ${HOME}/bin
)

for p in "${HOME_PATHS_PREPEND[@]}"
do
    if [ -d "${p}" ]; then
        PATH="${p}:$PATH"
    fi
done

for p in "${HOME_PATHS_APPEND[@]}"
do
    if [ -d "${p}" ]; then
        PATH="$PATH:${p}"
    fi
done

export PATH

MANPATH=$MANPATH:$HOME/man
MANPATH=$MANPATH:$HOME/local/${OS_REL}/man
#MANPATH=$MANPATH:$HOME/local/man

export MANPATH

if [ -d $HOME/local/${OS_REL}/lib ]; then
    MY_LD_LIB_PATH=$HOME/local/${OS_REL}/lib
fi

export LD_LIBRARY_PATH=$MY_LD_LIB_PATH

export PYTHONPATH=$HOME/bin/python

export EDITOR=vim

export LC_COLLATE=C

export CSCOPE_EDITOR="$HOME/bin/emacsclient-nowait"

#
# See man pages for tput(1) and terminfo(5)
# See also: https://wiki.archlinux.org/title/Bash/Prompt_customization
#
_BLK_ ()
{
    printf -- "\001$(tput setaf 0)\002"
}

_RED_ ()
{
    printf -- "\001$(tput setaf 1)\002"
}

_GRN_ ()
{
    printf -- "\001$(tput setaf 2)\002"
}

_YEL_ ()
{
    printf -- "\001$(tput setaf 3)\002"
}

_BLU_ ()
{
    printf -- "\001$(tput setaf 4)\002"
}

_MAG_ ()
{
    printf -- "\001$(tput setaf 5)\002"
}

_CYN_ ()
{
    printf -- "\001$(tput setaf 6)\002"
}

_WHT_ ()
{
    printf -- "\001$(tput setaf 7)\002"
}

_RESET_ ()
{
    printf -- "\001$(tput sgr0)\002"
}

__env_ps1 ()
{
    if [ -n "${ENV_PROMPT}" ]
    then
        printf -- "$(_RED_)[${ENV_PROMPT}]$(_BLK_)"
    fi
}

PS1='\n\
$(_GRN_)### \
$(__env_ps1)\
$(_BLU_)[\T \D{%P}]\
$(_CYN_)[${OS_REL}]\
$(__git_ps1 "$(_RED_) Branch: %s")\
\n\
$(_GRN_)### [\u@\h:\w]$(_RESET_)\
\n\
>--> \$ '

export PS1

# Load a local profile if it exists
if [ -f ~/.bash_profile_local ]; then
	. ~/.bash_profile_local
fi

# Set up ccache if it is installed.
LIB_DIRS=(
    /usr/lib
    /usr/lib64
    /usr/lib32
)

for LIB in ${LIB_DIRS[@]}
do
    if [ -d ${LIB}/ccache ] && [ -x ${LIB}/ccache/gcc ]
    then
        PATH=${LIB}/ccache:$PATH
        export PATH
        break
    fi
done

#
# Setup common downloads and sstate directories to be shared by all Yocto/OE
# builds.
#

mkdir -p "$HOME/Yocto/Downloads"
export DL_DIR="$HOME/Yocto/Downloads"

mkdir -p "$HOME/Yocto/SState"
export SSTATE_DIR="$HOME/Yocto/SState"

mkdir -p "$HOME/Yocto/HashEq"
export HASH_EQ_DIR="$HOME/Yocto/HashEq"

# Variables we need bitbake to get from environment.
TROTH_EXTRAWHITE=(
    DL_DIR
    SSTATE_DIR
    HASH_EQ_DIR
)

export BB_ENV_EXTRAWHITE="${BB_ENV_EXTRAWHITE} ${TROTH_EXTRAWHITE[@]}"

${ENV_YOCTO_INIT}
